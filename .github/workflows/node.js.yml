# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Install Octokit
      run: npm install @octokit/rest

    - name: Run make.js
      run: node ext/make.js

  github-release:
      runs-on: ubuntu-latest
      needs: build
      if: github.event_name == 'release'
      steps:
        - name: Download NTJ.js
          uses: actions/download-artifact@v4
          with:
            name: NTJ.js
            path: ext
        - name: Get Name of Artifact
          id: get_artifact
          run: |
            ARTIFACT_PATHNAME=$(ls ext/*.js | head -n 1)
            ARTIFACT_NAME=$(basename ${ARTIFACT_PATHNAME})
            echo "Artifact pathname: ${ARTIFACT_PATHNAME}"
            echo "Artifact name: ${ARTIFACT_NAME}"
            echo "ARTIFACT_PATHNAME=${ARTIFACT_PATHNAME}" >> $GITHUB_ENV
            echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
            echo "RELEASE_ID=${{ github.event.release.id }}" >> $GITHUB_ENV
        - name: Upload a Release Asset
          uses: actions/github-script@v2
          if: github.event_name == 'release'
          with:
            github-token: ${{secrets.GITHUB_TOKEN}}
            script: |
              console.log('environment', process.versions);

              const fs = require('fs').promises;

              const { repo: { owner, repo }, sha } = context;
              console.log({ owner, repo, sha });

              const releaseId = process.env.RELEASE_ID
              const artifactPathName = process.env.ARTIFACT_PATHNAME
              const artifactName = process.env.ARTIFACT_NAME
              console.log('Releasing', releaseId, artifactPathName, artifactName)

              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: releaseId,
                name: artifactName,
                data: await fs.readFile(artifactPathName)
              });
